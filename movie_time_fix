#!/usr/bin/env python

import os
import re
import optparse
import time
import sys
from subprocess import call

matchstr   = "\.mov|\.mts"
replacestr = ".mp4"


# A special version of OptionParser which doesn't reformat the epilog text.
class MyOptParser(optparse.OptionParser):
    def format_epilog(self, formatter):
        return self.epilog


parser = MyOptParser(usage="Usage: %prog [options]", 
    description = "This script finds all the source .mov and .mts files in a subdirectory input/, and matches them with .mp4 files with the same name in a subdirectory output/. For each matching pair, it copies over the access and modification times from the source file, as well as the EXIF data, using the program exiftool.",
    epilog = 
"""
This is useful because:
  .mts converters generally don't copy over the EXIF data. (This has been
      tested with Quicktime Player 10.3, Handbrake 0.9.9, and ffmpeg 2.2).
  .mov files converted by Handbrake lose EXIF data. (However, Quicktime Player
      preserves EXIF data.)
""")
parser.add_option('-n', '--dry-run', dest='dry_run_flag', action="store_true",
    default=False,
    help="With this option, it just shows which files would be operated on")
parser.add_option('-q', '--quiet', dest='quiet_flag', action="store_true",
    default=False,
    help="Don't print files.")
parser.add_option('-d', '--directory', dest='directory', default=".",
    help="Which directory to use (default is current dir).")



(options, args) = parser.parse_args()

os.chdir(options.directory)

# Go through each file in the input directory and check for match
for filename in os.listdir("input"):
    if re.search(matchstr, filename, flags=re.IGNORECASE):
        # Given original filename, find name of new movie file in output dir
        (fnew, nsubs) = re.subn(matchstr, replacestr, filename, flags=re.IGNORECASE)
        fold = os.path.join("input", filename)
        fnew = os.path.join("output", fnew)

        # Get times for original file
        (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(fold)

        if not options.quiet_flag:
            print(fold + " ==> " + fnew),
            if not os.path.exists(fnew):
                print("  Destination file does not exist!"),

        if (not options.dry_run_flag) and os.path.exists(fnew):
            # Copy EXIF data and date from old to new file
            ret = call(["exiftool", "-quiet", "-preserve", "-overwrite_original", 
                        "-TagsFromFile", fold, fnew])
            if ret != 0:
                print("  Error copying EXIF information!"),

            # Set times of new file - now handled by exiftool, so no longer needed
            # os.utime(fnew, (atime, mtime))

        print("")


if options.dry_run_flag:
    print("\n  File times and EXIF data not actually changed.")
    print("  The above is a list of what would change.")
    print("  Remove the -n or --dry-run flag to actually do it.")
